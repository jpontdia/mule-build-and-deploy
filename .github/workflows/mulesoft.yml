name: Mulesoft
on:
  workflow_call:
    inputs:
      keyvault-key:
        required: true
        description: Access key to KeyVault
        type: string
    secrets:
      azure-credentials:
        required: true
        description: Azure Credentials for login

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      #For testing dynamic content
      MavenCompile: mvn compile

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so the job can access it
      - name: Get the source code
        uses: actions/checkout@v3

      - name: debug echo
        run: |
          envsubst --version

      - name: Azure log-in
        uses: azure/login@v1
        with:
          creds: ${{ secrets.azure-credentials }}

      - name: Azure get KeyVault secrets
        uses: Azure/get-keyvault-secrets@v1
        with:
          keyvault: '${{ inputs.keyvault-key }}' # The name of KeyVault in Azure
          secrets: '
            salesforce-principal,
            salesforce-consumerkey,
            salesforce-keystore,
            salesforce-storepassword,
            mulesoft-nexus-ee-user,
            mulesoft-nexus-ee-password,
            cicd-connectedapp-clientid,
            cicd-connectedapp-secret
            '
        id: secretmanager # ID for secrets that you will reference
      
      - name: Setup JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          # Available options: liberica, corretto
          distribution: 'temurin'
          check-latest: true
          cache: 'maven'

      # Creates a settings.xml file and configure the anypoint repositories for the organization and the mulesoft EE
      - name: Maven settings.xml
        uses: whelk-io/maven-settings-xml-action@v21
        with:
          servers: >
            [
              {
                "id": "anypoint-exchange-v3",
                "username": "~~~Client~~~",
                "password": "${{ steps.secretmanager.outputs.cicd-connectedapp-clientid }}~?~${{ steps.secretmanager.outputs.cicd-connectedapp-secret }}" 
              },
              {
                "id": "mulesoft-enterprise-repository",
                "username": "${{ steps.secretmanager.outputs.mulesoft-nexus-ee-user }}",
                "password": "${{ steps.secretmanager.outputs.mulesoft-nexus-ee-password }}" 
              }
            ]
          repositories: >
            [
              {
                "id": "anypoint-exchange-v3",
                "name": "Assets for your anypoint organization",
                "url": "https://maven.anypoint.mulesoft.com/api/v3/maven/"
              },
              {
                "id": "mulesoft-releases",
                "name": "mulesoft-releases",
                "url": "https://repository-master.mulesoft.org/releases/"
              },
              {
                "id": "mulesoft-snapshots",
                "name": "MuleSoft Snapshot Repository",
                "url": "https://repository-master.mulesoft.org/snapshots/"
              },
              {
                "id": "mulesoft-enterprise-repository",
                "name": "MuleSoft Enterprise Repository",
                "url": "https://repository.mulesoft.org/nexus-ee/content/repositories/releases-ee/"
              }
            ]
          plugin_repositories: >
            [
              {
                "id": "mulesoft-plugins",
                "name": "Mulesoft plugins-release",
                "url": "https://repository.mulesoft.org/nexus/content/repositories/public/"
              },
              {
                "id": "central-plugins",
                "name": "plugins-release",
                "url": "https://repo1.maven.org/maven2"
              },
              {
                "id": "mulesoft-snapshots",
                "name": "MuleSoft Snapshot Repository",
                "url": "https://repository-master.mulesoft.org/snapshots/"
              },
              {
                "id": "mulesoft-plugins-release",
                "name": "Mulesoft plugins-release",
                "url": "https://repository.mulesoft.org/releases/",
                "snapshots": {
                  "enabled": "false",
                  "updatePolicy": "always",
                  "checksumPolicy": "fail"
                }
              }              
            ]
        
      - name: DEBUG - Show settings file
        run: |
          ls -la $HOME
          cat $HOME/.m2/settings.xml
          echo ${{ github.run_number }}

      - name: Copy Anypoint Exchange documentation
        run: |
          cp -Rfpv README.md exchange-docs/home.md
          cp -Rfpv docs/*.* exchange-docs/docs/*.* 

      - name: Compile code
        # I am using an environment variable just for testing dinamic content execution
        run: $MavenCompile

      - name: Run test cases and package
        run: |
          ## Get the git commit hash 
          commitHash=$(git rev-parse --short "$GITHUB_SHA")

          mvn package -DskipTests \
           -Dsalesforce.principal="${{ steps.secretmanager.outputs.salesforce-principal }}" \
           -Dsalesforce.consumerkey="${{ steps.secretmanager.outputs.salesforce-consumerkey }}" \
           -Dsalesforce.keystore="${{ steps.secretmanager.outputs.salesforce-keystore }}" \
           -Dsalesforce.storepassword="${{ steps.secretmanager.outputs.salesforce-storepassword }}"

      - name: Deploy to anypoint exchange
        if: ${{ false }}    
        run: |
          ## Deploy to anypoint exchange
          mvn deploy -DskipTests 

      - name: Publish - MUnit Application Coverage Report
        uses: actions/upload-artifact@master
        with:
          name: munit-application-coverage-report
          path: target/site/munit/coverage/*
      
      - name: Publish - MUnit Report
        uses: actions/upload-artifact@master
        with:
          name: munit-test-report
          path: target/surefire-reports/*

      - name: Publish - JAR 
        uses: actions/upload-artifact@master
        with:
          name: jar
          path: target/*.jar

      - name: Publish - POM 
        uses: actions/upload-artifact@master
        with:
          name: pom
          path: pom.xml

  build-backup:
    name: Build 
    if: ${{ false }}    
    runs-on: ubuntu-latest
    env:
      MavenCompile: mvn compile

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so the job can access it
      - name: Get the source code
        uses: actions/checkout@v3

      - name: DEBUG - echo
        run: |
          echo "HOME:"
          ls -la $HOME
          echo "tree HOME/work"
          tree $HOME/work
          echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
          echo "Run number: ${{ github.run_number }}"










  deploy-dev:
    name: Development
    needs: [build]
    runs-on: ubuntu-latest
    environment:
      name: dev
      url: 'https://dev.myapp.com'
    steps:
      - name: Get JAR file
        uses: actions/download-artifact@v2
        with:
          name: jar

      - name: Get POM file
        uses: actions/download-artifact@v2
        with:
          name: pom

      - name: DEBUG - Print directory tree and variables
        run: |
          echo "HOME:"
          ls -la $HOME
          #echo "tree HOME/work"
          #tree $HOME/work
          echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
          echo "Run number: ${{ github.run_number }}"

          # Get the jar file
          jar=$(ls *.jar)
          echo "Jar file: $jar"

      - name: Azure log-in
        uses: azure/login@v1
        with:
          creds: ${{ secrets.azure-credentials }}

      - name: Azure get KeyVault secrets
        uses: Azure/get-keyvault-secrets@v1.1
        with:
          keyvault: '${{ inputs.keyvault-key }}' # The name of KeyVault in Azure
          secrets: '
                    cicd-connectedapp-clientid,
                    cicd-connectedapp-secret,
                    salesforce-principal,
                    salesforce-consumerkey,
                    salesforce-keystore,
                    salesforce-storepassword
                    '
        id: secretmanager # ID for secrets that you will reference

      - name: Install NodeJs
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Anypoint CLI
        run: |
          echo "Install anypoint-cli-v4..."
          npm install -g anypoint-cli-v4
          echo ""
          echo "anypoint-cli-v4 --version: "
          anypoint-cli-v4 --version
          echo ""
          echo "Installing cloudhub-plugin"
          anypoint-cli-v4 plugins:install anypoint-cli-cloudhub-plugin

      - name: Deploy Application
        run: |
          ANYPOINT_CLIENT_ID="${{ steps.secretmanager.outputs.cicd-connectedapp-clientid }}"
          ANYPOINT_CLIENT_SECRET="${{ steps.secretmanager.outputs.cicd-connectedapp-secret }}"

          echo "Getting the service metadata from pom file for deployment"
          service=$(sed -n 's:.*<name>\(.*\)</name>.*:\1:p' pom.xml | sed -n 1p)
          servicegroup=$(sed -n 's:.*<groupId>\(.*\)</groupId>.*:\1:p' pom.xml | sed -n 2p)
          serviceartifact=$(sed -n 's:.*<artifactId>\(.*\)</artifactId>.*:\1:p' pom.xml | sed -n 2p)
          serviceversion=$(sed -n 's:.*<version>\(.*\)</version>.*:\1:p' pom.xml | sed -n 2p)

          echo "Service name: $service"
          echo "Service group: $servicegroup"
          echo "Service artifact: $serviceartifact"
          echo "Service version: $serviceversion"

          start=$(date +%s)
          echo ""
          echo "Deployment process start"

          envsuffix="dev"
          deploymentname=$service$envsuffix

          # Get the current status of the service
          DEPLOYMENT_STATUS=$(\
            anypoint-cli-v4 runtime-mgr cloudhub-application describe \
            --client_id $ANYPOINT_CLIENT_ID \
            --client_secret $ANYPOINT_CLIENT_SECRET \
            --output "json" $service | jq -r ".status")
          echo "Deployment status for service: $service is: $DEPLOYMENT_STATUS"

          # Verify if deployment is for update or new application
          operation="depoy"
          if [ "$DEPLOYMENT_STATUS" != "" ]; then
            operation="modify"
          fi
          echo "Deployment operation for serivce: $service is: $operation"
          echo "Deployment name: $deploymentname"
          end=$(date +%s)
          echo "  Elapsed time: $(($end-$start)) seconds"   